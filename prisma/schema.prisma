generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  createdAT      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  email          String           @unique
  password       String?
  active         String           @default("no")
  loginCount     Int              @default(0)
  lastLogin      DateTime?
  Session        Session[]
  telegramGroups telegramGroups[]
  userDetails    userDetails[]
  userProgress   userProgress[]
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expiresAt    DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model userDetails {
  id           Int       @id @default(autoincrement())
  firstName    String?
  lastName     String?
  autoShipDate DateTime?
  telegramName String?
  userId       Int
  telegramId   BigInt?   @unique
  user         User      @relation(fields: [userId], references: [id])
}

model userProgress {
  id        Int      @id @default(autoincrement())
  userId    Int
  itemId    String
  isChecked Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, itemId])
}

model telegramGroups {
  id       Int     @id @default(autoincrement())
  userId   Int
  isActive Boolean @default(false)
  chatId   BigInt
  chatName String?
  bot      bot     @relation(fields: [chatId], references: [chatId], onDelete: Cascade)
  user     User    @relation(fields: [userId], references: [id])

  @@unique([chatId, userId])
}

model bot {
  id             Int              @id @default(autoincrement())
  chatId         BigInt           @unique
  chatName       String?
  isActive       Boolean          @default(false)
  telegramGroups telegramGroups[]
}
